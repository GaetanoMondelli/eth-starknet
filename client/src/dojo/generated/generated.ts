/* Autogenerated file. Do not edit manually. */

import { AccountInterface } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const spawn = async ({ account }: { account: AccountInterface }) => {
      try {
        const res = await provider.execute(account, {
          contractName: "actions",
          entrypoint: "spawn",
          calldata: [],
        });
        console.log("spawned", res);
        return res;
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    const move_piece = async ({
      account,
      from,
      to,
    }: {
      account: AccountInterface;
      from: number;
      to: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: "actions",
          entrypoint: "move_piece",
          calldata: [from, to],
        });
      } catch (error) {
        console.error("Error executing move:", error);
        throw error;
      }
    };

    const ride_piece = async ({
      account,
      fenPos,
      nftRideId,
      tokenQuantity,
    }: {
      account: AccountInterface;
      fenPos: number;
      nftRideId: number;
      tokenQuantity: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: "actions",
          entrypoint: "ride_piece",
          calldata: [fenPos, nftRideId, tokenQuantity],
        });
      } catch (error) {
        console.error("Error executing ride:", error);
        throw error;
      }
    };

    const startGame = async ({
      account,
    }: {
      account: AccountInterface;
      fenPos: number;
      nftRideId: number;
      tokenQuantity: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: "actions",
          entrypoint: "startGame",
          calldata: [],
        });
      } catch (error) {
        console.error("Error executing ride:", error);
        throw error;
      }
    };

    return { spawn, move_piece, ride_piece, startGame };
  }
  return {
    actions: actions(),
  };
}
